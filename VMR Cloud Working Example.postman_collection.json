{
	"info": {
		"_postman_id": "6997b6af-fcac-4245-b257-e2b3731c67a2",
		"name": "VMR Cloud Working Example",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "New Empty Voyage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Parse and store variables\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.collectionVariables.set(\"current_voyage\", jsonData[\"voyage-id\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"vessel-id\": {{current_vessel}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/voyage",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"voyage"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Empty Voyage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Read and cache empty test data\", function() {",
							"    pm.collectionVariables.set(\"empty_voyage\", pm.response.json());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"voyage-id\": {{current_voyage}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/voyage",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"voyage"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Empty Assist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Parse and store variables\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.collectionVariables.set(\"current_assist\", jsonData[\"assist-id\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"voyage-id\": {{current_voyage}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/assist",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"assist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Empty Assist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Read and cache empty test data\", function() {",
							"    pm.collectionVariables.set(\"empty_assist\", pm.response.json());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"assist-id\": {{current_assist}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/assist",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"assist"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Voyage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Parse and store variables\", function () {",
							"    var requestJSON = JSON.parse(request.data);",
							"    var jsonData = pm.response.json();",
							"    pm.collectionVariables.set(\"current_voyage\", jsonData[\"voyage-id\"]);",
							"    requestJSON[\"voyage-id\"] = jsonData[\"voyage-id\"];",
							"    pm.collectionVariables.set(\"sent_voyage_info\", requestJSON);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"vessel-id\": {{current_vessel}},\n    \"start-time\": \"2022-01-01T10:00:01Z\",\n    \"start-hours\": 1,\n    \"skipper\": {\n        \"crew-id\": 156,\n        \"name\": \"Anne\",\n        \"rank\": \"Inshore Skipper\"\n    },\n    \"crew\": [\n        {\n            \"crew-id\": 25,\n            \"name\": \"Peter\",\n            \"rank\": \"Crew\"\n        },\n        {\n            \"crew-id\": 900,\n            \"name\": \"Julie\",\n            \"rank\": \"New Recruit\"\n        }\n    ],\n    \"weather\": {\n        \"seaway-tide\": {\n            \"height-metres\": 1.56,\n            \"time\": \"2022-01-01T01:02:03Z\"\n        },\n        \"wind\": {\n            \"speed-knots\": 11,\n            \"direction-degrees\": 90\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/voyage",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"voyage"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Voyage Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check all fields have been set\", function() {",
							"    var responseJSON = pm.response.json();",
							"    var emptyVoyage = pm.collectionVariables.get(\"empty_voyage\");",
							"    var sentVoyageInfo = pm.collectionVariables.get(\"sent_voyage_info\");",
							"    var expandedRequestJSON = Object.assign(emptyVoyage, sentVoyageInfo);",
							"    if (!Object.prototype.compareJSON(expandedRequestJSON, responseJSON)) {",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(`Not all JSON fields updated. Expected ${JSON.stringify(expandedRequestJSON)}, actual: ${JSON.stringify(responseJSON)}`);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"voyage-id\": {{current_voyage}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/voyage",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"voyage"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Risk",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Parse and store variables\", function () {",
							"    var requestJSON = JSON.parse(request.data);",
							"    var jsonData = pm.response.json();",
							"    var existingJSON = pm.collectionVariables.get(\"sent_voyage_info\");",
							"    var riskList = existingJSON[\"risk-history\"];",
							"    if (riskList == undefined) {",
							"        riskList = [];",
							"    }",
							"    requestJSON[\"risk-id\"] = jsonData[\"risk-id\"];",
							"    existingJSON[\"risk-history\"] = [requestJSON, ...riskList];",
							"    pm.collectionVariables.set(\"sent_voyage_info\", existingJSON);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"voyage-id\": {{current_voyage}},\n    \"time\": \"2022-01-01T10:00:45Z\",\n    \"management\": 1,\n    \"crew\": 2,\n    \"environment\": 1,\n    \"equipment\": 1,\n    \"type\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/risk",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"risk"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Voyage Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check all fields have been set\", function() {",
							"    var responseJSON = pm.response.json();",
							"    var emptyVoyage = pm.collectionVariables.get(\"empty_voyage\");",
							"    var sentVoyageInfo = pm.collectionVariables.get(\"sent_voyage_info\");",
							"    var expandedRequestJSON = Object.assign(emptyVoyage, sentVoyageInfo);",
							"    if (!Object.prototype.compareJSON(expandedRequestJSON, responseJSON)) {",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(`Not all JSON fields updated. Expected ${JSON.stringify(expandedRequestJSON)}, actual: ${JSON.stringify(responseJSON)}`);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"voyage-id\": {{current_voyage}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/voyage",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"voyage"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Voyage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Parse and store variables\", function () {",
							"    var requestJSON = JSON.parse(request.data);",
							"    var jsonData = pm.response.json();",
							"    var existingJSON = pm.collectionVariables.get(\"sent_voyage_info\");",
							"    var mergedJSON = Object.assign(existingJSON, requestJSON);",
							"    mergedJSON[\"voyage-id\"] = jsonData[\"voyage-id\"];",
							"    pm.collectionVariables.set(\"sent_voyage_info\", mergedJSON);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"voyage-id\": {{current_voyage}},\n    \"title\": \"Tow from Coomera to Runaway Bay\",\n    \"description\": \"Tow vessel overheating from Coomera. Vessel was moored to pontoon. Taken to Runaway Bay Marina. No incidents.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/voyage",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"voyage"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Voyage Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check all fields have been set\", function() {",
							"    var responseJSON = pm.response.json();",
							"    var emptyVoyage = pm.collectionVariables.get(\"empty_voyage\");",
							"    var sentVoyageInfo = pm.collectionVariables.get(\"sent_voyage_info\");",
							"    var expandedRequestJSON = Object.assign(emptyVoyage, sentVoyageInfo);",
							"    if (!Object.prototype.compareJSON(expandedRequestJSON, responseJSON)) {",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(`Not all JSON fields updated. Expected ${JSON.stringify(expandedRequestJSON)}, actual: ${JSON.stringify(responseJSON)}`);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"voyage-id\": {{current_voyage}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/voyage",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"voyage"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Assist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Parse and store variables\", function () {",
							"    var requestJSON = JSON.parse(request.data);",
							"    var jsonData = pm.response.json();",
							"    pm.collectionVariables.set(\"current_assist\", jsonData[\"assist-id\"]);",
							"    requestJSON[\"assist-id\"] = jsonData[\"assist-id\"];",
							"    pm.collectionVariables.set(\"sent_assist_info\", requestJSON);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"voyage-id\": {{current_voyage}},\n    \"pickup\": {\n        \"location\": {\n            \"name\": \"Coomera\",\n            \"gps\": {\n                \"lat\": -27.493021,\n                \"long\": 153.494023\n            },\n            \"status\": \"Berthed\",\n            \"depth-metres\": 3\n        },\n        \"time\": \"2022-01-01T11:12:13Z\"\n    },\n    \"problem\": \"Overheating\",\n    \"action\": \"Tow\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/assist",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"assist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Assist Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check all fields have been set\", function() {",
							"    var responseJSON = pm.response.json();",
							"    var emptyAssist = pm.collectionVariables.get(\"empty_assist\");",
							"    var sentAssistInfo = pm.collectionVariables.get(\"sent_assist_info\");",
							"    var expandedRequestJSON = Object.assign(emptyAssist, sentAssistInfo);",
							"    if (!Object.prototype.compareJSON(expandedRequestJSON, responseJSON)) {",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(`Not all JSON fields updated. Expected ${JSON.stringify(expandedRequestJSON)}, actual: ${JSON.stringify(responseJSON)}`);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"assist-id\": {{current_assist}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/assist",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"assist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Assist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Parse and store variables\", function () {",
							"    var requestJSON = JSON.parse(request.data);",
							"    var jsonData = pm.response.json();",
							"    var existingJSON = pm.collectionVariables.get(\"sent_assist_info\");",
							"    var mergedJSON = Object.assign(existingJSON, requestJSON);",
							"    mergedJSON[\"assist-id\"] = jsonData[\"assist-id\"];",
							"    pm.collectionVariables.set(\"sent_assist_info\", mergedJSON);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"assist-id\": {{current_assist}},\n    \"client\": {\n        \"name\": \"John\",\n        \"phone\": \"+123456789\",\n        \"vessel\": {\n            \"name\": \"Fat Hooker\",\n            \"registration\": \"AB123Q\",\n            \"type\": \"Cruiser\",\n            \"length-metres\": 5,\n            \"pob\": 4,\n            \"colour\": \"white\"\n        },\n        \"member-number\": 0\n    },\n    \"destination\": {\n        \"location\": {\n            \"name\": \"Runaway Bay\",\n            \"gps\": {\n                \"lat\": -27.494001,\n                \"long\": 153.121123\n            },\n            \"status\": \"Berthed\",\n            \"depth-metres\": 2\n        },\n        \"time\": \"2022-01-01T15:16:17Z\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/assist",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"assist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Risk",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"voyage-id\": {{current_voyage}},\n    \"time\": \"2022-01-01T11:12:05Z\",\n    \"management\": 1,\n    \"crew\": 1,\n    \"environment\": 1,\n    \"equipment\": 1,\n    \"type\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/risk",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"risk"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Assist Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check all fields have been set\", function() {",
							"    var responseJSON = pm.response.json();",
							"    var emptyAssist = pm.collectionVariables.get(\"empty_assist\");",
							"    var sentAssistInfo = pm.collectionVariables.get(\"sent_assist_info\");",
							"    var expandedRequestJSON = Object.assign(emptyAssist, sentAssistInfo);",
							"    if (!Object.prototype.compareJSON(expandedRequestJSON, responseJSON)) {",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(`Not all JSON fields updated. Expected ${JSON.stringify(expandedRequestJSON)}, actual: ${JSON.stringify(responseJSON)}`);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"assist-id\": {{current_assist}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{schema}}://{{server}}/vmr/v0/assist",
					"protocol": "{{schema}}",
					"host": [
						"{{server}}"
					],
					"path": [
						"vmr",
						"v0",
						"assist"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var _ = require('lodash');",
					"",
					"Object.prototype.stopRun = function(reason) {",
					"    postman.setNextRequest(null);",
					"    pm.expect.fail(reason);",
					"}",
					"",
					"Object.prototype.expandVoyageWithEmptyFields = function(voyage) {",
					"    var emptyVoyage = pm.collectionVariables.get(\"emptyVoyage\");",
					"    _.mergeWith(emptyVoyage, voyage, function(v1, v2) {",
					"        return Object.assign({}, v1, v2);",
					"    });",
					"    return emptyVoyage;",
					"}",
					"",
					"Object.prototype.compareJSON = function(expect, actual) {",
					"    return _.isEqual(expect, actual);",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Check status code\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "schema",
			"value": "http"
		},
		{
			"key": "server",
			"value": "localhost:80"
		},
		{
			"key": "current_vessel",
			"value": "1",
			"type": "default"
		},
		{
			"key": "current_voyage",
			"value": "1",
			"type": "default"
		},
		{
			"key": "empty_voyage",
			"value": ""
		},
		{
			"key": "sent_voyage_info",
			"value": ""
		},
		{
			"key": "current_assist",
			"value": ""
		},
		{
			"key": "sent_assist_info",
			"value": ""
		},
		{
			"key": "empty_assist",
			"value": ""
		}
	]
}